{"contents":"exports.__esModule = true;\nvar fs_1 = require(\"fs\");\nvar os_1 = require(\"os\");\nvar path_1 = require(\"path\");\nvar util_1 = require(\"util\");\nvar packageJson_1 = __fusereq(2);\nvar tsconfigJson_1 = __fusereq(3);\nconst packageJsonContent = packageJson_1.packageJson`{\n    \"name\": \"testing\"\n}`;\nconst tsConfigContent = tsconfigJson_1.tsconfigJson`\n{\n    \"compilerOptions\": {\n        \"noImplicitAny\": false\n    }\n}\n`;\nconst outPath = '~/Projects/experiments/output';\nconst outPathResolved = outPath.replace('~', os_1.homedir());\nconst stat = util_1.promisify(fs_1.stat);\nconst writeFile = util_1.promisify(fs_1.writeFile);\nconst mkdir = util_1.promisify(fs_1.mkdir);\nconst f = (name, content) => {\n  return {\n    __type: 'file',\n    name,\n    content\n  };\n};\nconst d = (name, nodes) => {\n  return {\n    __type: 'directory',\n    name,\n    nodes\n  };\n};\nconst createFoos = foos => foos.map(i => f(`foo${i}.ts`, `Foo${i}`));\nconst spec = args => d('', [f('package.json', packageJsonContent), f('tsconfig.json', tsConfigContent), d('src', [...createFoos(args.foos), d('nested-dir', [f('testing.json', 'foo'), f('testing2.json', 'foo'), f('testing3.json', 'foo')])])]);\nconst structure = spec({\n  foos: [1, 2, 3, 4]\n});\nconst resolve = path => {\n  return path.replace('~', os_1.homedir());\n};\nconst generateDirectory = async (basePath, dir) => {\n  const basePathResolved = resolve(basePath);\n  if (!fs_1.existsSync(basePathResolved)) {\n    await mkdir(basePathResolved);\n  }\n  const dirPath = path_1.join(basePathResolved, dir.name);\n  console.log('creating directory:', dirPath);\n  try {\n    if (!fs_1.existsSync(dirPath)) {\n      await mkdir(dirPath);\n    }\n  } catch (e) {\n    console.log(`fucked up creating ${dirPath}: `, e);\n  }\n  const generateFile = async (filename, content) => {\n    const filePath = path_1.join(dirPath, filename);\n    console.log('creating file:', filePath);\n    await writeFile(filePath, content);\n  };\n  if (!dir.nodes) return;\n  for (const node of dir.nodes) {\n    if (node.__type === 'file') {\n      await generateFile(node.name, node.content);\n    } else if (node.__type === 'directory') {\n      await generateDirectory(dirPath, node);\n    }\n  }\n};\ngenerateDirectory(outPath, structure);\n","sourceMap":"{\"version\":3,\"sources\":[\"/Users/martaver/Projects/bernie/git/app/cleric/packages/meta/src/index.ts\"],\"names\":[\"packageJsonContent\",\"packageJson_1\",\"tsConfigContent\",\"tsconfigJson_1\",\"outPath\",\"outPathResolved\",\"replace\",\"homedir\",\"stat\",\"util_1\",\"writeFile\",\"mkdir\",\"f\",\"name\",\"content\",\"__type\",\"d\",\"nodes\",\"createFoos\",\"foos\",\"map\",\"i\",\"spec\",\"args\",\"structure\",\"resolve\",\"path\",\"generateDirectory\",\"basePath\",\"dir\",\"basePathResolved\",\"existsSync\",\"dirPath\",\"join\",\"console\",\"log\",\"e\",\"generateFile\",\"filename\",\"filePath\",\"node\"],\"mappings\":\";;;;;;;MAQMA,qBAAqBC;;;MAIrBC,kBAAkBC;;;;;;;;MAQlBC,UAAU;MACVC,kBAAkBD,QAAQE,QAAQ,UAAQC;MAE1CC,OAAOC,sBAAaD;MACpBE,YAAYD,sBAAaC;MACzBC,QAAQF,sBAAaE;MAgBrBC,IAAiB,CAACC,MAAMC;;IACpBC,QAAQ;IAAQF;IAAMC;;;MAa1BE,IAAsB,CAACH,MAAMI;;IACzBF,QAAQ;IAAaF;IAAMI;;;MAW/BC,aAAa,AAACC,QAClBA,KAAKC,IAAI,AAAAC,KAAKT,QAAQS,cAAcA;MAEhCC,OAAO,AAACC,QACZP,EAAE,KACAJ,EAAE,gBAAgBZ,qBAClBY,EAAE,iBAAiBV,kBACnBc,EAAE,WACGE,WAAWK,KAAKJ,OACnBH,EAAE,eACAJ,EAAE,gBAAgB,QAClBA,EAAE,iBAAiB,QACnBA,EAAE,iBAAiB;MAKrBY,YAAYF;EAAMH,OAAO,GAAG,GAAG,GAAG;;MAElCM,UAAU,AAACC;SAERA,KAAKpB,QAAQ,UAAQC;;MAGxBoB,oBAAoB,OAAOC,UAAkBC;QAC3CC,mBAAmBL,QAAQG;YAEzBG,WAAWD;UACXnB,MAAMmB;;QAGRE,iBAAeC,KAAKH,kBAAkBD,IAAIhB;EAChDqB,QAAQC,IAAI,uBAAuBH;;cAGzBD,WAAWC;YACXrB,MAAMqB;;WAEPI;IACPF,QAAQC,0BAA0BH,aAAaI;;QAG3CC,eAAe,OAAOC,UAAkBxB;UACtCyB,kBAAgBN,KAAKD,SAASM;IACpCJ,QAAQC,IAAI,kBAAkBI;UAExB7B,UAAU6B,UAAUzB;;OAGvBe,IAAIZ;aAEEuB,QAAQX,IAAIZ;QACjBuB,KAAKzB,WAAW;YACZsB,aAAaG,KAAK3B,MAAM2B,KAAK1B;eAC1B0B,KAAKzB,WAAW;YACnBY,kBAAkBK,SAASQ;;;;AAKvCb,kBAAkBvB,SAASoB\"}"}