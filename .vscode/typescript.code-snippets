{
    // Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and 
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "Spec for ts file with runtime checking only": {
        "prefix": "spec",
        "body": [
            "import { ${2:$1} } from './${1:${TM_FILENAME_BASE/(.*)\\..+$/$1/}}';",
            "",
            "describe('${3:$1}', () => {",
            "  it('${4:should do stuff}', () => {",
            "    const actual = {};",
            "",
            "    expect(actual).toStrictEqual({});$0",
            "  });",
            "});",
            "",
        ]
    },
    "Spec for ts file with both runtime and type checking": {
        "prefix": "spec.both",
        "body": [
            "import { ${2:$1} } from './${1:${TM_FILENAME_BASE/(.*)\\..+$/$1/}}';",
            "import { checks, check, Pass } from '@cleric/common';",
            "",
            "describe('${3:$1}', () => {",
            "  it('${4:should do stuff}', () => {",
            "    const actual = {};",
            "",
            "    expect(actual).toStrictEqual({});$0",
            "",
            "    checks([check<typeof actual, {}, Pass>()]);",
            "  });",
            "});",
            "",
        ]
    },
    "Spec for ts file with type checking only": {
        "prefix": "spec.types",
        "body": [
            "import { ${2:$1} } from './${1:${TM_FILENAME_BASE/(.*)\\..+$/$1/}}';",
            "import { checks, check, Pass } from '@cleric/common';",
            "",
            "describe('${3:$1}', () => {",
            "  it('${4:should do stuff}', () => {",
            "    type actual = {}$0;",
            "    type expected = {};",
            "",
            "    checks([check<actual, expected, Pass>()]);",
            "  });",
            "});",
            "",
        ]
    }
}